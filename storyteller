#!/usr/bin/env python

import argparse
import os
from TTS.api import TTS
import torch
from pydub import AudioSegment
from pprint import pprint


def determine_device():
    if torch.cuda.is_available():
        return torch.device("cuda")
    elif torch.backends.mps.is_available():
        return torch.device("mps")
    else:
        return torch.device("cpu")


def check_in_file(filepath: str) -> str:
    filepath_expanded = os.path.expanduser(filepath)
    if filepath_expanded.strip() == "":
        print("A file name to process '--in-file=' must be provided.")
        exit()

    return filepath_expanded


def check_speaker(tts: TTS, speaker_id: str):
    if speaker_id in tts.speakers:
        return speaker_id

    print(
        f"The requested speaker '{speaker_id}' is not found in the model '{tts.model_name}'."
    )
    print(f"There are the following speakers available:")
    print(tts.speakers)
    speaker_id = input(f"Please choose one spealer id: ")

    return check_speaker(tts, speaker_id)


def parse_args():
    parser = argparse.ArgumentParser(
        description="Read a text file and output an audio book."
    )
    parser.add_argument("--in-file", required=True, help="Path to the input text file")
    parser.add_argument(
        "--out-file",
        default="book.wav",
        help='Output WAV file name. Default is "book.wav".',
    )
    parser.add_argument("--start-line", type=int, default=1, help="Start line number.")
    parser.add_argument("--to-line", type=int, default=0, help="End line number.")
    parser.add_argument(
        "--process-lines",
        type=int,
        default=1,
        help="Number of lines to process from start-line",
    )
    parser.add_argument(
        "--pause-between-lines",
        type=int,
        default=1000,
        help="Silence between lines in milliseconds",
    )
    parser.add_argument("--speaker-id", type=str, default="")
    parser.add_argument("--model-name", type=str, default="tts_models/en/vctk/vits")

    return parser.parse_args()


def load_model(model_name: str) -> TTS:
    try:
        return TTS(model_name)
    except Exception:
        print(f"Could not load the request model '{model_name}'.")
        print(f"There are the following models available:")
        pprint(TTS.list_models())
        model_name = input("Please choose a model: ")
        return load_model(model_name)


def main():
    args = parse_args()

    book = open(check_in_file(args.in_file), "r")

    tts = load_model(args.model_name)
    tts.to(device=determine_device())

    speaker = None
    if tts.is_multi_speaker:
        speaker = check_speaker(tts=tts, speaker_id=args.speaker_id)

    lines = list(filter(None, map(lambda s: s.strip('\n"\“\”'), book.readlines())))
    # ensure start line is valid
    start_line = min(args.start_line, len(lines))
    # determine end point based on arguments
    limit = min(
        (args.to_line if args.to_line > 0 else (start_line + args.process_lines - 1)),
        len(lines),
    )

    book_audio = AudioSegment.silent(duration=args.pause_between_lines)

    line_wav_file_name = "line.wav"
    for i in range(start_line - 1, limit):
        print("Processing line {}.".format(i + 1))
        tts.tts_to_file(text=lines[i], file_path=line_wav_file_name, speaker=speaker)
        book_audio += AudioSegment.from_wav(line_wav_file_name) + AudioSegment.silent(
            duration=args.pause_between_lines
        )

    book_audio.export(args.out_file, format="wav")


if __name__ == "__main__":
    main()
